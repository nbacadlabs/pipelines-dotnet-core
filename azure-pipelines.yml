#Asp.net core example 
parameters:
- name: succeed
  displayName: Succeed or fail
  type: boolean
  default: false

trigger:
- master

pool:
  name: Default

jobs:
- job: Work
  steps:
  - script: echo Hello, world!
    displayName: 'Run a one-line script'

  # This malformed command causes the job to fail
  # Only run this command if the succeed variable is set to false
  - script: git clone malformed input
    condition: eq(${{ parameters.succeed }}, false)

# This job creates a work item, and only runs if the previous job failed
- job: ErrorHandler
  dependsOn: Work
  condition: failed()
  steps: 
  - bash: |
      az boards work-item create \
        --title "Build $(build.buildNumber) failed" \
        --type bug \
        --org $(System.TeamFoundationCollectionUri) \
        --project $(System.TeamProject)
    env: 
      AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
    displayName: 'Create work item on failure'

# variables:
#   buildConfiguration: 'Release'

# jobs:
# - job: Work
#   steps:
#   - script: |
#       echo Hello, wold!
#     displayName: 'Run a one-line script'
  
#   - script: git clone malformed input
#     condition: eq(${{ parameters.succeed }}, false) # Only run this command if the succeed variable is set to false

# - job: ErrorHandler
#   dependsOn: Work
#   condition: failed()
#   steps:
#   - bash: |
#       az boards work-item create \
#         --title "Build $(build.buildNumber) failed" \
#         --type bug \
#         --org $(System.TeamFoundationCollectionUri) \
#         --project $(System.TeamProject)
#     env:
#       AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
#     displayName: 'Create work item on failure'


# - job: InstallApp_Net
#   steps:
#   - script: |
#       echo -e $APPINSTALL dotnet build --configuration $(buildConfiguration)
#     displayName: 'dotnet build $(buildConfiguration)'
